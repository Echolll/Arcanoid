//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Scripts/Controls/PlayersControl.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayersControl: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayersControl()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayersControl"",
    ""maps"": [
        {
            ""name"": ""Moving"",
            ""id"": ""bd156169-0bf5-422f-9e8d-0c6922523417"",
            ""actions"": [
                {
                    ""name"": ""FirstPlayer"",
                    ""type"": ""Value"",
                    ""id"": ""440f3abc-0a2c-4ee4-80a0-c9b8742fc295"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SecondPlayer"",
                    ""type"": ""Value"",
                    ""id"": ""2c342b39-8f1f-41ce-952a-206360993c45"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""StartGame"",
                    ""type"": ""Button"",
                    ""id"": ""118ffb65-a875-437c-bac7-0757dccb4e17"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PauseGame"",
                    ""type"": ""Button"",
                    ""id"": ""01169a5b-7f04-42b2-8a34-957ff5885c08"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""3D Vector"",
                    ""id"": ""6f71cfb6-09f1-4faf-bef4-308d7122a715"",
                    ""path"": ""3DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FirstPlayer"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""ba2f8bb3-0fed-4f75-8d38-20921d4ce555"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FirstPlayer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""abc20039-2a47-48d5-817f-c794273ea6fd"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FirstPlayer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""bb35db16-15eb-4df5-b5d3-c38fb2981ea2"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FirstPlayer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""0fde898f-41cb-4091-b266-4a8b9ef92e64"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FirstPlayer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""3D Vector"",
                    ""id"": ""2b0c5394-ee65-45e9-8057-ed553f7b5663"",
                    ""path"": ""3DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondPlayer"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""87d39046-c689-4fcb-a93f-2773f629987b"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondPlayer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""338bfae2-1528-42cc-b99f-5591ae2e2647"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondPlayer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""6ff68c96-b989-4c77-8f1a-8a932d597983"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondPlayer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""7dbc153a-5bff-4356-8a55-1e67227c2168"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondPlayer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""ce79c02d-0679-49b1-afae-ee23d6c08630"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StartGame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1e9d51e8-2b8b-4a47-9e46-0fbc3c38471a"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PauseGame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Moving
        m_Moving = asset.FindActionMap("Moving", throwIfNotFound: true);
        m_Moving_FirstPlayer = m_Moving.FindAction("FirstPlayer", throwIfNotFound: true);
        m_Moving_SecondPlayer = m_Moving.FindAction("SecondPlayer", throwIfNotFound: true);
        m_Moving_StartGame = m_Moving.FindAction("StartGame", throwIfNotFound: true);
        m_Moving_PauseGame = m_Moving.FindAction("PauseGame", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Moving
    private readonly InputActionMap m_Moving;
    private List<IMovingActions> m_MovingActionsCallbackInterfaces = new List<IMovingActions>();
    private readonly InputAction m_Moving_FirstPlayer;
    private readonly InputAction m_Moving_SecondPlayer;
    private readonly InputAction m_Moving_StartGame;
    private readonly InputAction m_Moving_PauseGame;
    public struct MovingActions
    {
        private @PlayersControl m_Wrapper;
        public MovingActions(@PlayersControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @FirstPlayer => m_Wrapper.m_Moving_FirstPlayer;
        public InputAction @SecondPlayer => m_Wrapper.m_Moving_SecondPlayer;
        public InputAction @StartGame => m_Wrapper.m_Moving_StartGame;
        public InputAction @PauseGame => m_Wrapper.m_Moving_PauseGame;
        public InputActionMap Get() { return m_Wrapper.m_Moving; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovingActions set) { return set.Get(); }
        public void AddCallbacks(IMovingActions instance)
        {
            if (instance == null || m_Wrapper.m_MovingActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MovingActionsCallbackInterfaces.Add(instance);
            @FirstPlayer.started += instance.OnFirstPlayer;
            @FirstPlayer.performed += instance.OnFirstPlayer;
            @FirstPlayer.canceled += instance.OnFirstPlayer;
            @SecondPlayer.started += instance.OnSecondPlayer;
            @SecondPlayer.performed += instance.OnSecondPlayer;
            @SecondPlayer.canceled += instance.OnSecondPlayer;
            @StartGame.started += instance.OnStartGame;
            @StartGame.performed += instance.OnStartGame;
            @StartGame.canceled += instance.OnStartGame;
            @PauseGame.started += instance.OnPauseGame;
            @PauseGame.performed += instance.OnPauseGame;
            @PauseGame.canceled += instance.OnPauseGame;
        }

        private void UnregisterCallbacks(IMovingActions instance)
        {
            @FirstPlayer.started -= instance.OnFirstPlayer;
            @FirstPlayer.performed -= instance.OnFirstPlayer;
            @FirstPlayer.canceled -= instance.OnFirstPlayer;
            @SecondPlayer.started -= instance.OnSecondPlayer;
            @SecondPlayer.performed -= instance.OnSecondPlayer;
            @SecondPlayer.canceled -= instance.OnSecondPlayer;
            @StartGame.started -= instance.OnStartGame;
            @StartGame.performed -= instance.OnStartGame;
            @StartGame.canceled -= instance.OnStartGame;
            @PauseGame.started -= instance.OnPauseGame;
            @PauseGame.performed -= instance.OnPauseGame;
            @PauseGame.canceled -= instance.OnPauseGame;
        }

        public void RemoveCallbacks(IMovingActions instance)
        {
            if (m_Wrapper.m_MovingActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMovingActions instance)
        {
            foreach (var item in m_Wrapper.m_MovingActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MovingActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MovingActions @Moving => new MovingActions(this);
    public interface IMovingActions
    {
        void OnFirstPlayer(InputAction.CallbackContext context);
        void OnSecondPlayer(InputAction.CallbackContext context);
        void OnStartGame(InputAction.CallbackContext context);
        void OnPauseGame(InputAction.CallbackContext context);
    }
}
